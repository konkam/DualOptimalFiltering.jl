---
title : DualOptimalFiltering README
author : Guillaume KON KAM KING
weave_options:
  out_path : README.md
  doctype :  github
  cache : false
  wrap : true
  toc : true
---


[![Coverage Status](https://coveralls.io/repos/github/konkam/DualOptimalFiltering.jl/badge.svg?branch=master)](https://coveralls.io/github/konkam/DualOptimalFiltering.jl?branch=master)
[![codecov](https://codecov.io/gh/konkam/DualOptimalFiltering.jl/branch/master/graph/badge.svg)](https://codecov.io/gh/konkam/DualOptimalFiltering.jl)
[![Build Status](https://travis-ci.org/konkam/DualOptimalFiltering.jl.svg?branch=master)](https://travis-ci.org/konkam/DualOptimalFiltering.jl.svg?branch=master)

# DualOptimalFiltering

Optimal filtering, smoothing, and general inference using a dual process.


This package provides a set of functions to perform exact optimal filtering, smoothing, or general inference using a dual process. Several approximation strategies are also implemented.
We provide examples on the Cox-Ingersoll-Ross model with Poisson distributed data and on the Wright-Fisher model with multinomial distributed data.

The algorithms in this package are presented in:

[Guillaume Kon Kam King, Omiros Papaspiliopoulos, and Matteo Ruggiero. "Exact inference for a class of hidden Markov models on general state spaces." Electronic Journal of Statistics 15.1 (2021): 2832-2875.](https://projecteuclid.org/journals/electronic-journal-of-statistics/volume-15/issue-1/Exact-inference-for-a-class-of-hidden-Markov-models-on/10.1214/21-EJS1841.full)

 and:

 [Kon Kam King, G., Pandolfi, A., Piretto, M., & Ruggiero, M. (2024). Approximate filtering via discrete dual processes. Stochastic Processes and Their Applications, 168, 104268.](https://www.sciencedirect.com/science/article/abs/pii/S0304414923002405), [ArXiV](https://arxiv.org/abs/2310.00599)

To reproduce the results of this last paper, please follow think [link](https://github.com/konkam/DualOptimalFiltering.jl/tree/master/SuppMatApproximateFilteringViaDiscreteDualProcesses).

## Installation

```julia; eval = false
import Pkg
Pkg.add("https://github.com/konkam/DualOptimalFiltering.jl")
```

## Usage

### Cox-Ingersoll-Ross Filtering example

#### Simulate some data

```julia
using DualOptimalFiltering, Random, Distributions

function simulate_CIR_data(;Nsteps_CIR = 50, Nobs = 5, δ = 3., γ = 2.5, σ = 4.)
    Random.seed!(1)

    dt_CIR = 0.011
    λ = 1.

    time_grid_CIR = [k*dt_CIR for k in 0:(Nsteps_CIR-1)]
    X_CIR = generate_CIR_trajectory(time_grid_CIR, 3, δ, γ, σ)
    Y_CIR = map(λ -> rand(Poisson(λ), Nobs), X_CIR);
    data_CIR = Dict(zip(time_grid_CIR, Y_CIR))
    return data_CIR, X_CIR,  δ, γ, σ, λ
end

data_CIR, X_CIR,  δ, γ, σ, λ = simulate_CIR_data()
```
#### Filter the data

```julia
Λ_of_t_CIR, wms_of_t_CIR, θ_of_t_CIR = filter_CIR(δ, γ, σ, λ, data_CIR; silence = true);
```

#### Plot the filtering distribution

Filtering distribution, 95% credible band and true hidden signal:


```julia
using Plots

function plot_data_and_posterior_distribution_CIR(δ, θ_of_t, Λ_of_t, wms_of_t, data, X_CIR)
    times = keys(data) |> collect |> sort;
    psi_t = [DualOptimalFiltering.create_Gamma_mixture_density(δ, θ_of_t[t], Λ_of_t[t], wms_of_t[t]) for t in times];
    qt0025 = [DualOptimalFiltering.compute_quantile_mixture_hpi(δ, θ_of_t[t], Λ_of_t[t], wms_of_t[t], 0.025) for t in keys(data) |> collect |> sort];
    qt0975 = [DualOptimalFiltering.compute_quantile_mixture_hpi(δ, θ_of_t[t], Λ_of_t[t], wms_of_t[t], 0.975) for t in keys(data) |> collect |> sort];

    y = range(0, stop = maximum(data |> values |> collect |> x -> vcat(x...)), length = 200)
    z = [f.(y) for f in psi_t] |> x -> hcat(x...)

    heatmap(times, y, z, color = :heat)

    plot!(times, [data[t] for t in times] |> X -> hcat(X...)', seriestype=:scatter, c=:black, legend = false)
    plot!(times, X_CIR, c=:blue)
    plot!(times, qt0025, c=:red)
    plot!(times, qt0975, c=:red)

end

pl = plot_data_and_posterior_distribution_CIR(δ, θ_of_t_CIR, Λ_of_t_CIR, wms_of_t_CIR, data_CIR, X_CIR)

```

### K-dimensional Wright-Fisher diffusion filtering example

#### Simulate some data

```julia
using DualOptimalFiltering, Random, Distributions, ExactWrightFisher

function simulate_WF_data()
    K = 4
    α = ones(K)
    Pop_size_WF3 = 15
    Ntimes_WF3 = 6
    time_step_WF3 = 0.1
    time_grid_WF3 = [k*time_step_WF3 for k in 0:(Ntimes_WF3-1)]
    Random.seed!(4)
    wfchain_WF3 = Wright_Fisher_K_dim_exact_trajectory(rand(Dirichlet(K,0.3)), time_grid_WF3[1:(end-1)], α)
    wfobs_WF3 = [rand(Multinomial(Pop_size_WF3, wfchain_WF3[:,k])) for k in 1:size(wfchain_WF3,2)] |> l -> hcat(l...)
    data_WF3 = Dict(zip(time_grid_WF3 , [wfobs_WF3[:,t] for t in 1:size(wfobs_WF3,2)]))
    return data_WF3, wfchain_WF3, α
end

data_WF, X_WF, α = simulate_WF_data()
```
#### Filter the data

```julia
Λ_of_t_WF, wms_of_t_WF = DualOptimalFiltering.filter_WF(α, data_WF |> DualOptimalFiltering.prepare_WF_dat_1D_2D |> last; silence = false);
```

#### Plot the filtering distribution

Filtering distribution, 95% credible band and true hidden signal:


```julia
using Plots

function plot_data_and_posterior_distribution_marginal_WF(α, Λ_of_t, wms_of_t, data, X_WF; marginal = 1)
    times = keys(data) |> collect |> sort;
    K = length(α)

    psi_t = [DualOptimalFiltering.create_dirichlet_mixture_marginals_pdf(α, Λ_of_t[t], wms_of_t[t]) for t in times];


    qt0025 = [DualOptimalFiltering.compute_quantile_mixture_beta(α, Λ_of_t[t], wms_of_t[t], 0.025; marginal = marginal) for t in times];
    qt0975 = [DualOptimalFiltering.compute_quantile_mixture_beta(α, Λ_of_t[t], wms_of_t[t], 0.975; marginal = marginal) for t in times];

    psi_t_marginal = [x -> f(x)[marginal] for f in psi_t]

    y = range(0, stop = 1, length = 200)
    z = [f.(y) for f in psi_t_marginal] |> x -> hcat(x...)

    heatmap(times, y, z, color = :heat)

    plot!(times, [data[t][marginal]/sum(data[t]) for t in times] |> X -> hcat(X...)', seriestype=:scatter, c=:black, legend = false)
    plot!(times, X_WF[marginal, :], c=:blue)
    plot!(times, qt0025, c=:red)
    plot!(times, qt0975, c=:red)

end

pl = plot_data_and_posterior_distribution_marginal_WF(α, Λ_of_t_WF, wms_of_t_WF, data_WF, X_WF; marginal = 3)

```